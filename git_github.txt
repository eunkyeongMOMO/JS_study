    입사전에 깃허브 벼락치기

    git 설치하고 git init 입력 .git파일 생성됨
    파일 스테이징 -> git add 파일명 / 여러개 스테이징 git add .
    파일에 대한 메모 -> git commit -m"메모할 내용"
    git add, git commit을 같이 하려면? -> git commit -am"메세지"
    git status -> git 상태창 보기 / git log -> git 정보보기

    git commit 전에 현재 파일하고 이전파일하고 차이 확인하기
    -> git difftool 바로전 commit 이랑 지금 commit이랑 차이점 알려줌
    hjku 로 터미널 창에서 이동 가능. 
    특정 commit하고 비교할때 -> git difftool commitID
    현재 파일, 특정커밋 비교가능
    git Graph 익스텐션 설치하면 difftool안쓰고도 쉽게 비교가능

    git branch만들기
       git branch 브랜치명 ->브랜치 생성 
       git switvh 브랜치명 ->해당 브랜치로 이동
        git branch -d 브렌치명 ->해당 브렌치 삭제
   -> merge 안한 branch 삭제시 에는 git branch -D 브렌치명 으로 해야함

   
    git branch merge

    똑같은 파일에 똑같은 줄을 수정한 경우 문제가 생김
    conflict 문제 발생시 원하는 코드만 남기고 git commit -am""해주면 됨
    merge 방법
    3way merge -> main,sub branch 둘다에서 새로 commit한 경우 새로운 commit을 만들면서 merge됨
    fast-forward -> main commit이 없고 sub에서만 commit이 일어난 경우 새로운 commit을 main으로 바꿔서 저장
    
    git rebase을 사용해도 merge 가능
    rebase를 사용하는 이유 -> 간단한 branch의 경우 새로운 commit없이 합쳐지기때문에 보기깔끔할수있음
    사용법은 sub branch로 이용한 다음
    git rebase 중심브렌치명 을 입력하면 merge된다.


    squash ang merge 
    
    brach가 많아질수로 3way merge하면 가독성이 떨어지고 github에서 볼때에도 불평함
    git merge --squash 새브런치명
    -> 새브런치에있던 내용 다 합쳐서 하나의 commit으로 만들어서 합쳐줌
     